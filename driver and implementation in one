#include <iostream>
#include <fstream>
#include <cstdlib>
#include <iomanip>
using namespace std;


struct Fox {
        //members
            int xIndex;
            int yIndex;
            int fedLevel;
            bool alive;
};
 
struct Rabbit {
        //members
            int xIndex;
            int yIndex;
            int age;
            bool alive;
};

void PrintGrids(int **FoxBoard, int **RabbitBoard, ostream& outStream, int numRows, int numCols);
bool RabbitStep( int **rabbitBoard, Rabbit *listOfRabbits, int& numberRabbitsTotal, int& numberRabbitsAlive,                     
                        int numRows, int numCols, int rabbitListLength,int maxNumRabbitsPerGrid, int numChildren);
void FoxStep( int **foxBoard, Fox *listOfFoxes, int **rabbitBoard,
                  Rabbit *listOfRabbits, int numberFoxesTotal, int& numberFoxesAlive, int numberRabbitsTotal,
                  int& numberRabbitsAlive, int numRows, int numCols, int foxListLength, int rabbitListLength);
int findNextLiveFox( Fox *foxList, int Row, int Col, int numberFoxesTotal,
                              int& lastFoxIndex );
int FindNextLiveRabbit( Rabbit *rabbitList, int Row, int Col, int numberRabbitsTotal,
                        int nextRabbitIndex );


#define MAX_FOXES_PER_GRID 9
#define MAX_RABBITS_PER_GRID 20

int main ()
{
        double fracFox;
        double fracRabbit;
        int maxFoxes;
        int maxRabbits;
        int maxChildren;
        int numberRabbitsAlive = 0;
        int numberRabbitsTotal = 0;
		int numberFoxesAlive = 0;
		int numberFoxesTotal = 0;

        int numGen;
        int numRows;
        int numCols;

        int k;
        int seed;
        double increment;
        double firstFract;
        int MM;
		int ff;
        double prob;

        int i, j;
        int m = 0;
		int p = 0;
        int **foxGrid = NULL;
        int **rabbitGrid = NULL;

        int tries;
        ofstream outFile;
        char filename[80] = {'\0'};

        
        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the name of the output file: ";
                cin >> filename;
                outFile.open(filename);
                if (outFile.fail())
                {
                        cerr << "ERROR: output file not opened correctly " << endl;
                }
                else
                {
                        break;
                }
        }
                
        if (tries == 6)
        {
                cerr << "ERROR: could not open output file after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the number of rows in the simulation grid: ";
                if (!(cin >> numRows))
                {
                        cerr << "ERROR: Cannot read number of rows " << endl;
                }
                else if (numRows > 0 && numRows < 15)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal number of rows for the board " << endl;
                }
                cin.clear();
                cin.sync();
        }

        
        if (tries == 6)
        {
                cerr << "ERROR: could not read number of rows after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the number of columns in the simulation grid: ";
                if (!(cin >> numCols))
                {
                        cerr << "ERROR: Cannot read number of columns " << endl;
                }
                else if (numCols > 0 && numCols < 15)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal number of columns for the board " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read number of columns after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the number of generations: ";
                if (!(cin >> numGen))
                {
                        cerr << "ERROR: Cannot read number of generations " << endl;
                }
                else if (numGen > 0 && numGen < 40)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal number of generations for the board " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read number of generations after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the seed for the random number generator: ";
                if (!(cin >> seed))
                {
                        cerr << "ERROR: Cannot read the seed for the random number generator " << endl;
                }
                else if (seed > 0 && seed < RAND_MAX)
                {
					srand(seed);
					break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal seed " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the seed for the random number generator after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the initial fraction of squares in the grid containing foxes: ";
                if (!(cin >> fracFox))
                {
                        cerr << "ERROR: Cannot read the initial fraction of squares in the grid containing foxes " << endl;
                }
                else if (fracFox > 0.05 && fracFox < 0.95)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal initial fraction of squares in the grid with foxes " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the initial fraction of squares in the grid containing no foxes after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the initial fraction of squares in the grid containing rabbits: ";
                if (!(cin >> fracRabbit))
                {
                        cerr << "ERROR: Cannot read the initial fraction of squares in the grid containing rabbits " << endl;
                }
                else if (fracRabbit > 0.05 && fracRabbit < 0.95)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal initial fraction of squares in the grid with rabbits " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the initial fraction of squares in the grid containing no rabbits after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the initial maximum number of foxes per grid: ";
                if (!(cin >> maxFoxes))
                {
                        cerr << "ERROR: Cannot read the initial maximum number of foxes per grid " << endl;
                }
                else if (maxFoxes > 0 && maxFoxes <= MAX_FOXES_PER_GRID)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal initial maximum number of foxes per square " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the initial maximum number of foxes per square after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the initial maximum number of rabbits per grid: ";
                if (!(cin >> maxRabbits))
                {
                        cerr << "ERROR: Cannot read the initial maximum number of rabbits per grid " << endl;
                }
                else if (maxRabbits > 0 && maxRabbits <= MAX_RABBITS_PER_GRID)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal initial maximum number of rabbits per square " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the initial maximum number of rabbits per square after 6 tries ";
                return 1;
        }

        for ( tries = 0; tries < 6; tries++)
        {
                cout << "Enter the maximum number off offspring when rabbits breed: ";
                if (!(cin >> maxChildren))
                {
                        cerr << "ERROR: Cannot read the maximum number of children produced when rabbits breed " << endl;
                }
                else if (maxChildren > 0 && maxChildren <= MAX_RABBITS_PER_GRID)
                {
                        break;                
                }
                else
                {
                        cerr << "ERROR: Read an illegal maximum number of children produced when rabbits breed " << endl;
                }
                cin.clear();
                cin.sync();
        }

        if (tries == 6)
        {
                cerr << "ERROR: could not read the maximum number of children produced when rabbits breed after 6 tries ";
                return 1;
        }
        // End of initial Errors
        // Start filling up arrays

        foxGrid = new int*[numRows]; // an array of pointers
        for ( i = 0; i < numRows; i++ )
        {        
                //go through each pointer, make each pointer a 1D dynamic array, as a result
                //we will get arrays within arrays
                //an array of size row*cols
                foxGrid[i] = new int[numCols]; 
        }

       

        // initializing fox array
        for ( i = 0; i < numRows; i++ )
        {
                for ( j = 0; j < numCols; j++)
                {
                        foxGrid[i][j] = maxFoxes;
                        k = rand();
                        increment = (fracFox/maxFoxes);
                        firstFract = (1 - fracFox);
                        for ( MM = 0; MM < maxFoxes; MM ++)
                        {
                                if ( (double)k < firstFract * RAND_MAX )
                                {
                                        foxGrid[i][j] = MM;
                                        break;
                                }
                                firstFract = (1-fracFox) + (fracFox * (MM+1)/maxFoxes);
                        }                     
                }               
        }

        
        //Allocating a 1D dynamic array
        //'Fox' is a data type
        //*foxList is a pointer
        //*foxList is being initialized with data type Fox 
        Fox *foxList = new Fox[numRows*numCols*maxFoxes*2];
        
        for ( i = 0; i < numRows; i++ )
        {
                for ( j = 0; j < numCols; j++ )
                {
                        for ( ff = 0; ff < foxGrid[i][j]; ff++ )
                        {			
                            foxList[p].xIndex = j;
                            foxList[p].yIndex = i;
                            foxList[p].fedLevel = rand() % 10;
                            foxList[p].alive = true;
							numberFoxesAlive++;
							p++;
                        }
                }
        }

		//Initial total number foxes
		//Initial total number of alive foxes
		numberFoxesTotal = numberFoxesAlive;


        //configure a numRows by numCols 2D dynamic array
        //for rabbits
        rabbitGrid = new int*[numRows];
        for (i = 0; i < numRows; i++)
        {
                rabbitGrid[i] = new int[numCols];
        }
        
        //initializing 2D rabbit array
        for ( i = 0; i < numRows; i++ )
        {
            for ( j = 0; j < numCols; j++)
            {
                rabbitGrid[i][j] = maxRabbits;
                k = rand();
                increment = (fracRabbit/maxRabbits);
                firstFract = (1 - fracRabbit);
                prob = (double)k / (double)RAND_MAX;
                for ( MM = 0; MM < maxRabbits; MM ++) // possible values for number of rabbits
                {
                    if ( (double)k < firstFract * RAND_MAX ) // check to see if the probability is satsified, if it is break, if not change the condition
                    {
                            rabbitGrid[i][j] = MM;
                            break;
                    }
                    firstFract = (1-fracRabbit) + (fracRabbit * (MM+1)/maxRabbits);
                }            
            }               
        }
        
        //Allocating a 1D dynamic array
        //'Rabbit' is a data type
        //*rabbitList is a pointer
        //*rabbitList is being initialized with data type Rabbit
        Rabbit *rabbitList = new Rabbit[numRows*numCols*maxRabbits*20];
        
        for ( i = 0; i < numRows; i++ )
        {
			for ( j = 0; j < numCols; j++ )
			{
				// go through each square
				// for each square determine the number of rabbits
				// inc ff for each rabbit
				// then inc m for each rabbit
				// this will ensure that each square of rabbits is listed inside rabbitlist
				for ( int ff = 0; ff < rabbitGrid[i][j]; ff++ )
				{                                                                                               
					rabbitList[m].xIndex = j;
					rabbitList[m].yIndex = i;
					rabbitList[m].age = rand()%10;
					rabbitList[m].alive = true;
					numberRabbitsAlive++;
					/*cout << "X index: " << rabbitList[m].xIndex << endl;
					cout << "Y index: " << rabbitList[m].yIndex << endl;
					cout << "Age of rabbit[" << m << "]" << " in Grid " << i << "," << j << " " << "=" << rabbitList[m].age << endl;*/
					m++;
				}

			}
        }
		numberRabbitsTotal = numberRabbitsAlive;
		cout << endl << "after initialization" << endl;
		outFile << "after initialization" << endl;
		PrintGrids(foxGrid, rabbitGrid, cout, numRows, numCols);
		PrintGrids(foxGrid, rabbitGrid, outFile, numRows, numCols);


		for ( int g = 0; g < numGen; g ++ )
		{
			cout << endl << endl << endl << endl;
			cout << "after rabbits die of old age and breed" << endl;
			RabbitStep(rabbitGrid, rabbitList, numberRabbitsTotal, numberRabbitsAlive, numRows, numCols, numRows*numCols*maxRabbits*20, maxRabbits, maxChildren);
			PrintGrids(foxGrid, rabbitGrid, cout, numRows, numCols);

			cout << endl << endl << endl << endl;
			cout << "after foxes eat rabbits" << endl;
			FoxStep(foxGrid,foxList,rabbitGrid,rabbitList,numberFoxesTotal,numberFoxesAlive,numberRabbitsTotal,numberRabbitsAlive,numRows,numCols,numRows*numCols*maxFoxes*2,numRows*numCols*maxRabbits*20);

			outFile << endl << endl << endl << endl;
			outFile << "after foxes eat and move" << endl;
			PrintGrids(foxGrid, rabbitGrid, outFile, numRows, numCols);
		}

        return 0;
}




void PrintGrids(int **FoxBoard, int **RabbitBoard, ostream& outStream, int numRows, int numCols)
{

        int i;
        int j;

        for ( i = 0; i < numRows; i++ )
        {
                for ( j = 0; j < numCols; j++ )
                {
                        outStream << right << setw(3) << FoxBoard[i][j] << "," << right << setw(2) << RabbitBoard[i][j];
                }
                outStream << endl;
        }
}


bool RabbitStep( int **rabbitBoard, Rabbit *listOfRabbits, int& numberRabbitsTotal, int& numberRabbitsAlive,                     
                        int numRows, int numCols, int rabbitListLength,int maxNumRabbitsPerGrid, int numChildren)
{

		int i;
		int j;
		int m;
		int randomrabbit;
		int pair;


		
		for ( m = 0; m < numberRabbitsTotal; m++ )
		{
			i = listOfRabbits[m].yIndex;
			j = listOfRabbits[m].xIndex;
			listOfRabbits[m].age = listOfRabbits[m].age + 1;     
			if ( listOfRabbits[m].age > 10 && listOfRabbits[m].alive == true )
			{
				listOfRabbits[m].alive = false;
				//cout << rabbitBoard[i][j] << endl;
				rabbitBoard[i][j] = rabbitBoard[i][j] - 1;
				//cout << rabbitBoard[i][j] << endl;
				numberRabbitsAlive = numberRabbitsAlive - 1;                                                           
			}             
		}

		//rabbit breeding
		for ( i = 0; i < numRows; i++ )
		{
			for ( j = 0; j < numCols; j++ )
			{
				pair = rabbitBoard[i][j]/2;
				while ( pair > 0 )
				{	
					
					randomrabbit = (rand()%numChildren) + 1;
					if ( (rabbitBoard[i][j] + randomrabbit) > 20 )
					{
						numberRabbitsTotal = numberRabbitsTotal + (20 - rabbitBoard[i][j]);
						numberRabbitsAlive = numberRabbitsAlive + (20 - rabbitBoard[i][j]);
						for ( m; m < numberRabbitsTotal; m++)
						{
							listOfRabbits[m].xIndex = j;
							listOfRabbits[m].yIndex = i;
							listOfRabbits[m].age = 1;
							listOfRabbits[m].alive = true;			
						}
						rabbitBoard[i][j] = 20;
					}
					else if ( (rabbitBoard[i][j] + randomrabbit) <= 20 )
					{
						numberRabbitsTotal = numberRabbitsTotal + randomrabbit;
						numberRabbitsAlive = numberRabbitsAlive + randomrabbit;
						for ( m; m < numberRabbitsTotal; m++)
						{
							listOfRabbits[m].xIndex = j;
							listOfRabbits[m].yIndex = i;
							listOfRabbits[m].age = 1;
							listOfRabbits[m].alive = true;
						}
						rabbitBoard[i][j] = rabbitBoard[i][j] + randomrabbit;
					}
					pair--;
				}
			}
		}

		/*for ( m = 0; m < numberRabbitsTotal; m ++ )
		{
			cout << "ROW index: " << listOfRabbits[m].yIndex << endl;
			cout << "COL index: " << listOfRabbits[m].xIndex << endl;
			cout << "Age of rabbit[" << m << "]" << " in Grid " << listOfRabbits[m].yIndex << "," << listOfRabbits[m].xIndex << " " << "=" << listOfRabbits[m].age << endl;
		}*/
		//cout << "this is m: " << m << endl;
		
		

	return true;
}

void FoxStep( int **foxBoard, Fox *listOfFoxes, int **rabbitBoard,
                  Rabbit *listOfRabbits, int numberFoxesTotal, int& numberFoxesAlive, int numberRabbitsTotal,
                  int& numberRabbitsAlive, int numRows, int numCols, int foxListLength, int rabbitListLength)
{

	int i;
	int j;
	int ff;
	int foxIndex = 0;
	int rabbitIndex = 0;
	int test;
	int numRan = 0;
	int temp;
	int lastfoxIndex = 0;
	int iteration = 0;

	/*for ( int m = 0; m < numberRabbitsTotal; m ++ )
	{
		cout << "ROW index: " << listOfRabbits[m].yIndex << endl;
		cout << "COL index: " << listOfRabbits[m].xIndex << endl;
		cout << "Age of rabbit[" << m << "]" << " in Grid " << listOfRabbits[m].yIndex << "," << listOfRabbits[m].xIndex << " " << "=" << listOfRabbits[m].age << endl;
		cout << "The rabbit status: " << listOfRabbits[m].alive << endl;
	}*/

	for ( i = 0; i < numRows; i++ )
	{
		for (j = 0; j < numCols; j++)
		{
			foxIndex = 0;
			for ( ff = 0; ff < foxBoard[i][j]; ff++)
			{
				findNextLiveFox (listOfFoxes, i, j, numberFoxesTotal, foxIndex);
				if ( rabbitBoard[i][j] > 0 )
				{
					
					//cout << "FOX [" << foxIndex << "]" << " in Grid " << listOfFoxes[foxIndex].yIndex << "," << listOfFoxes[foxIndex].xIndex << endl;
					//cout << "FEDLEVEL: " << listOfFoxes[foxIndex].fedLevel << endl;
					//cout << "UPDATING..." << endl;
					test = FindNextLiveRabbit (listOfRabbits,i,j,numberRabbitsTotal,rabbitIndex); 	
					listOfFoxes[foxIndex].fedLevel++;
					listOfRabbits[test].alive = false;
					numberRabbitsAlive--;
					rabbitBoard[i][j]--;
					//cout << "FOX [" << foxIndex << "]" << " in Grid " << listOfFoxes[foxIndex].yIndex << "," << listOfFoxes[foxIndex].xIndex << endl;
					//cout << "FEDLEVEL: " << listOfFoxes[foxIndex].fedLevel << endl;
					foxIndex++;
				}
				else
				{
					//cout << "FOX [" << foxIndex << "]" << " in Grid " << listOfFoxes[foxIndex].yIndex << "," << listOfFoxes[foxIndex].xIndex << endl;
					//cout << "FEDLEVEL: " << listOfFoxes[foxIndex].fedLevel << endl;
					//cout << "NO RABBIT IN GRID...UPDATING..." << endl;
					listOfFoxes[foxIndex].fedLevel--;
					//cout << "FOX [" << foxIndex << "]" << " in Grid " << listOfFoxes[foxIndex].yIndex << "," << listOfFoxes[foxIndex].xIndex << endl;
					//cout << "FEDLEVEL: " << listOfFoxes[foxIndex].fedLevel << endl;
					foxIndex++;
				}
			}
		}
	}

	PrintGrids(foxBoard,rabbitBoard,cout,numRows,numCols);


	// ---------------------------------------- Foxes move ------------------------------------------
	/*for ( foxIndex = 0; foxIndex < numberFoxesTotal; foxIndex++)
	{
		cout << "FOX [" << foxIndex << "]" << " in Grid " << listOfFoxes[foxIndex].yIndex << "," << listOfFoxes[foxIndex].xIndex << endl;
		cout << listOfFoxes[foxIndex].alive << endl;
	}*/

			for ( foxIndex = 0; foxIndex < numberFoxesTotal; foxIndex++)
			{

				if (listOfFoxes[foxIndex].fedLevel <= 0 && listOfFoxes[foxIndex].alive == true)
				{
					listOfFoxes[foxIndex].alive = false;
					numberFoxesAlive--;
					foxBoard[listOfFoxes[foxIndex].yIndex][listOfFoxes[foxIndex].xIndex]--;
				}

				if (listOfFoxes[foxIndex].alive == true)
				{
					numRan = rand()%8;
					//right edge
					foxBoard[listOfFoxes[foxIndex].yIndex][listOfFoxes[foxIndex].xIndex]--;
					if ( numRan == 1 || numRan == 2 || numRan == 3 )
					{
						if ( listOfFoxes[foxIndex].xIndex == numCols - 1 )
						{
							listOfFoxes[foxIndex].xIndex = 0;
						}
						else
						{
							listOfFoxes[foxIndex].xIndex = listOfFoxes[foxIndex].xIndex + 1;
						}
					}
					//top edge
					if ( numRan == 5 || numRan == 4 || numRan == 3)
					{
						if ( listOfFoxes[foxIndex].yIndex == 0 )
						{
							listOfFoxes[foxIndex].yIndex = numRows - 1;
						}
						else
						{
							listOfFoxes[foxIndex].yIndex = listOfFoxes[foxIndex].yIndex - 1;
						}
					}
					//left edge
					if ( numRan == 5 || numRan == 6 || numRan == 7 )
					{
						if ( listOfFoxes[foxIndex].xIndex == 0 )
						{
							listOfFoxes[foxIndex].xIndex = numCols - 1;
						}
						else
						{
							listOfFoxes[foxIndex].xIndex = listOfFoxes[foxIndex].xIndex - 1;
						}
					}
					//bottom edge
					if ( numRan == 7 || numRan == 0 || numRan == 1 ) 
					{
						if ( listOfFoxes[foxIndex].yIndex == numRows - 1 )
						{
							listOfFoxes[foxIndex].yIndex = 0;
						}
						else
						{
							listOfFoxes[foxIndex].yIndex = listOfFoxes[foxIndex].yIndex + 1;
						}
					}
					foxBoard[listOfFoxes[foxIndex].yIndex][listOfFoxes[foxIndex].xIndex]++;
				}
				//cout << endl << endl;
				//PrintGrids(foxBoard,rabbitBoard,cout,numRows,numCols);
			}
		

	//---------------------------------------------------

	cout << endl << endl << endl << endl;
	cout << "after foxes move" << endl;
	PrintGrids(foxBoard,rabbitBoard,cout,numRows,numCols);
	foxIndex = 0;

}

int findNextLiveFox( Fox *foxList, int Row, int Col, int numberFoxesTotal,
                              int& lastFoxIndex )
{
	
	for ( lastFoxIndex; lastFoxIndex < numberFoxesTotal; lastFoxIndex++ )
	{
		if (foxList[lastFoxIndex].yIndex == Row && foxList[lastFoxIndex].xIndex == Col)
		{
			if (foxList[lastFoxIndex].alive == true)
			{
				return lastFoxIndex;
			}		
		}
	}

	return -1;	
}


int FindNextLiveRabbit( Rabbit *rabbitList, int Row, int Col, int numberRabbitsTotal,
                        int nextRabbitIndex )
{
	for ( nextRabbitIndex; nextRabbitIndex < numberRabbitsTotal; nextRabbitIndex++ )
	{
		if (rabbitList[nextRabbitIndex].yIndex == Row && rabbitList[nextRabbitIndex].xIndex == Col)
		{
			if (rabbitList[nextRabbitIndex].alive == true)
			{
				return nextRabbitIndex;
			}		
		}
	}

	return -1;
}
